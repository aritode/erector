var search_data = {"index":{"searchIndex":["actionview","base","templatehandlers","erttemplate","cell","view","erector","abstractwidget","afterinitialize","classmethods","attributes","cache","caching","classmethods","convenience","dependencies","dependency","element","erect","erected","externals","classmethods","html","htmlwidget","htmlwidget","inline","inlinewidget","jquery","mixin","needs","classmethods","output","promise","rails","formbuilder","helpers","templatehandler","widgetextensions","classmethods","railsformbuilder","railtie","rawstring","rbhandler","sass","tag","text","unicodebuilder","widget","widgets","environmentbadge","page","table","xmlwidget","xmlwidget","externalrenderer","fieldtable","field","form","object","<<()","<<()","==()","[]()","[]=()","__in_erb_template()","_attributes()","_close_tag()","_element()","_emit()","_emit()","_emit_via()","_emit_via()","_empty_element()","_mark()","_open_tag()","_render()","_render_close_tag()","_render_inside_tag()","_render_open_tag()","_rewind()","_set_attributes()","_tag_name()","after_initialize()","after_initialize_parts()","append()","append_indentation()","append_newline()","assigns_for()","at_line_start?()","basename()","body_attributes()","body_content()","buffer()","button()","cachable()","cachable?()","cache()","cache()","cache=()","cacheable()","call()","call_block()","call_block()","camelize()","capture()","capture()","capture()","capture_content()","character()","classize()","classname()","classnames()","column()","comment()","comment()","compile()","constantize()","content()","content()","content()","content()","content()","content()","content()","content()","content_for()","controller_assigns_propagate_to_partials()","controller_assigns_propagate_to_partials=()","convert()","css()","def_block_rails_helper()","def_rails_form_helper()","def_simple_rails_helper()","def_simple_rails_helper()","delete()","delete_all()","dependencies()","depends_on()","dir()","doctype()","dom_id()","element()","emit()","empty_element()","environment()","eql?()","erector()","explode()","explode_dirs()","external()","extra_widgets()","field()","fields_for()","filename()","filter_local_assigns_for_partial()","flash()","form_for()","form_method()","format_attributes()","format_sorted()","full_tags()","full_tags()","generate()","get_needs()","h()","hash()","head_content()","html_attributes()","html_safe?()","hyphenize_underscores()","hyphenize_underscores=()","ignore_extra_assigns()","ignore_extra_assigns=()","ignore_extra_controller_assigns()","ignore_extra_controller_assigns=()","included()","included()","included()","included()","included()","included_head_content()","included_scripts()","included_stylesheets()","indent()","init_rails()","inline()","inline()","inline?()","inline_scripts()","inline_styles()","instance_variables_for_widget_assignment()","instance_variables_for_widget_assignment()","instance_variables_for_widget_assignment_for()","instruct()","instruct()","interpolate()","javascript()","join()","jquery()","key()","line_offset()","link_to()","mark()","method()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","my_dependencies()","namify()","nbsp()","needed_defaults()","needed_variables()","needs()","needs?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","newline()","newliney?()","newliney?()","newliney?()","output()","output_line()","page_title()","parent_class()","placeholder()","prettyprint_default()","prettyprint_default()","prettyprint_default=()","process_file()","process_line()","push()","raw()","rawtext()","remove_unneeded_assigns()","render()","render()","render()","render()","render_externals()","render_widget()","render_with_erector_widget()","render_with_externals()","rendered_externals()","respond_to?()","respond_to?()","rest_method()","rewind()","row_classes()","row_css_class()","run()","sass()","say()","scss()","self_closing?()","self_closing_tags()","self_closing_tags()","session()","should_assign?()","should_cache?()","snake_case()","sort_attributes()","sort_for_xml_declaration()","sort_for_xml_declaration()","sort_for_xml_declaration()","space_left()","store_for()","tag()","tag()","tag_named()","tag_named()","text()","text()","text!()","to_a()","to_a()","to_erector()","to_html()","to_html()","to_html()","to_html()","to_pretty()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_text()","undent()","uniq()","url()","url_for()","widget()","wrapping()","readme"],"longSearchIndex":["actionview","actionview::base","actionview::templatehandlers","actionview::templatehandlers::erttemplate","cell","cell::view","erector","erector::abstractwidget","erector::afterinitialize","erector::afterinitialize::classmethods","erector::attributes","erector::cache","erector::caching","erector::caching::classmethods","erector::convenience","erector::dependencies","erector::dependency","erector::element","erector::erect","erector::erected","erector::externals","erector::externals::classmethods","erector::html","erector::htmlwidget","erector::htmlwidget","erector::inline","erector::inlinewidget","erector::jquery","erector::mixin","erector::needs","erector::needs::classmethods","erector::output","erector::promise","erector::rails","erector::rails::formbuilder","erector::rails::helpers","erector::rails::templatehandler","erector::rails::widgetextensions","erector::rails::widgetextensions::classmethods","erector::railsformbuilder","erector::railtie","erector::rawstring","erector::rbhandler","erector::sass","erector::tag","erector::text","erector::unicodebuilder","erector::widget","erector::widgets","erector::widgets::environmentbadge","erector::widgets::page","erector::widgets::table","erector::xmlwidget","erector::xmlwidget","externalrenderer","fieldtable","fieldtable::field","form","object","erector::dependencies#<<()","erector::output#<<()","erector::dependency#==()","erector::cache#[]()","erector::cache#[]=()","erector::rails::widgetextensions#__in_erb_template()","erector::promise#_attributes()","erector::promise#_close_tag()","erector::element#_element()","erector::abstractwidget#_emit()","erector::caching#_emit()","erector::abstractwidget#_emit_via()","erector::caching#_emit_via()","erector::element#_empty_element()","erector::promise#_mark()","erector::promise#_open_tag()","erector::promise#_render()","erector::promise#_render_close_tag()","erector::promise#_render_inside_tag()","erector::promise#_render_open_tag()","erector::promise#_rewind()","erector::promise#_set_attributes()","erector::promise#_tag_name()","erector::afterinitialize::classmethods#after_initialize()","erector::afterinitialize::classmethods#after_initialize_parts()","erector::output#append()","erector::output#append_indentation()","erector::output#append_newline()","erector::rails::assigns_for()","erector::output#at_line_start?()","erector::erected#basename()","erector::widgets::page#body_attributes()","erector::widgets::page#body_content()","erector::output#buffer()","fieldtable#button()","erector::caching::classmethods#cachable()","erector::caching::classmethods#cachable?()","erector::caching#cache()","erector::caching::classmethods#cache()","erector::caching::classmethods#cache=()","erector::caching::classmethods#cacheable()","erector::rails::templatehandler#call()","erector::abstractwidget#call_block()","erector::inline#call_block()","erector::erect#camelize()","erector::abstractwidget#capture()","erector::rails#capture()","erector::rails::widgetextensions#capture()","erector::abstractwidget#capture_content()","erector::text#character()","erector::erected#classize()","erector::erected#classname()","erector::erected#classnames()","erector::widgets::table::column()","erector::xmlwidget#comment()","erector::xmlwidget#comment()","actionview::templatehandlers::erttemplate#compile()","erector::erect#constantize()","erector::abstractwidget#content()","erector::widgets::environmentbadge#content()","erector::widgets::page#content()","erector::widgets::table#content()","externalrenderer#content()","fieldtable#content()","fieldtable::field#content()","form#content()","erector::rails#content_for()","erector::rails::widgetextensions::classmethods#controller_assigns_propagate_to_partials()","erector::rails::widgetextensions::classmethods#controller_assigns_propagate_to_partials=()","erector::erected#convert()","erector::convenience#css()","erector::rails::helpers::def_block_rails_helper()","erector::rails::def_rails_form_helper()","erector::rails::def_simple_rails_helper()","erector::rails::helpers::def_simple_rails_helper()","erector::cache#delete()","erector::cache#delete_all()","erector::externals::classmethods#dependencies()","erector::externals::classmethods#depends_on()","erector::erected#dir()","erector::widgets::page#doctype()","erector::convenience#dom_id()","erector::element#element()","erector::abstractwidget#emit()","erector::element#empty_element()","erector::widgets::environmentbadge#environment()","erector::dependency#eql?()","erector::mixin#erector()","erector::erect#explode()","erector::erect#explode_dirs()","erector::externals::classmethods#external()","erector::widgets::page#extra_widgets()","fieldtable#field()","erector::rails::helpers#fields_for()","erector::erected#filename()","erector::rails::filter_local_assigns_for_partial()","erector::rails::helpers#flash()","erector::rails::helpers#form_for()","form#form_method()","erector::attributes#format_attributes()","erector::attributes#format_sorted()","erector::xmlwidget::full_tags()","erector::xmlwidget::full_tags()","erector::unicodebuilder#generate()","erector::needs::classmethods#get_needs()","erector::text#h()","erector::dependency#hash()","erector::widgets::page#head_content()","erector::widgets::page#html_attributes()","erector::rawstring#html_safe?()","erector::abstractwidget::hyphenize_underscores()","erector::abstractwidget::hyphenize_underscores=()","erector::needs::classmethods#ignore_extra_assigns()","erector::needs::classmethods#ignore_extra_assigns=()","erector::rails::widgetextensions::classmethods#ignore_extra_controller_assigns()","erector::rails::widgetextensions::classmethods#ignore_extra_controller_assigns=()","erector::afterinitialize::included()","erector::caching::included()","erector::externals::included()","erector::needs::included()","erector::rails::widgetextensions::included()","erector::widgets::page#included_head_content()","externalrenderer#included_scripts()","externalrenderer#included_stylesheets()","erector::output#indent()","erector::init_rails()","erector::inline()","erector::abstractwidget::inline()","erector::tag#inline?()","externalrenderer#inline_scripts()","externalrenderer#inline_styles()","actionview::base#instance_variables_for_widget_assignment()","cell::view#instance_variables_for_widget_assignment()","actionview::base#instance_variables_for_widget_assignment_for()","erector::xmlwidget#instruct()","erector::xmlwidget#instruct()","erector::dependency::interpolate()","erector::convenience#javascript()","erector::convenience#join()","erector::jquery#jquery()","erector::cache#key()","actionview::templatehandlers::erttemplate::line_offset()","erector::rails::helpers#link_to()","erector::output#mark()","form#method()","erector::promise#method_missing()","erector::rails#method_missing()","erector::rails::formbuilder#method_missing()","erector::rails::helpers#method_missing()","erector::railsformbuilder#method_missing()","erector::externals::classmethods#my_dependencies()","erector::unicodebuilder#namify()","erector::text#nbsp()","erector::needs::classmethods#needed_defaults()","erector::needs::classmethods#needed_variables()","erector::needs::classmethods#needs()","erector::needs::classmethods#needs?()","erector::abstractwidget::new()","erector::afterinitialize::new()","erector::cache::new()","erector::dependency::new()","erector::erect::new()","erector::erected::new()","erector::needs::new()","erector::output::new()","erector::promise::new()","erector::rails::formbuilder::new()","erector::railsformbuilder::new()","erector::tag::new()","erector::unicodebuilder::new()","fieldtable::new()","erector::output#newline()","erector::tag#newliney?()","erector::xmlwidget#newliney?()","erector::xmlwidget#newliney?()","erector::unicodebuilder#output()","erector::unicodebuilder#output_line()","erector::widgets::page#page_title()","erector::erected#parent_class()","erector::output#placeholder()","erector::abstractwidget::prettyprint_default()","erector::abstractwidget#prettyprint_default()","erector::abstractwidget::prettyprint_default=()","erector::unicodebuilder#process_file()","erector::unicodebuilder#process_line()","erector::dependencies#push()","erector::text#raw()","erector::text#rawtext()","erector::rails::remove_unneeded_assigns()","erector::rails::render()","erector::rails#render()","erector::rails::helpers#render()","erector::rbhandler#render()","erector::externals#render_externals()","object#render_widget()","object#render_with_erector_widget()","erector::externals#render_with_externals()","externalrenderer#rendered_externals()","erector::rails#respond_to?()","erector::rails::helpers#respond_to?()","form#rest_method()","erector::output#rewind()","erector::widgets::table::row_classes()","erector::widgets::table#row_css_class()","erector::erect#run()","erector::sass#sass()","erector::erect#say()","erector::sass#scss()","erector::tag#self_closing?()","erector::xmlwidget::self_closing_tags()","erector::xmlwidget::self_closing_tags()","erector::rails::helpers#session()","erector::rails::should_assign?()","erector::caching#should_cache?()","erector::tag#snake_case()","erector::attributes#sort_attributes()","erector::abstractwidget#sort_for_xml_declaration()","erector::xmlwidget#sort_for_xml_declaration()","erector::xmlwidget#sort_for_xml_declaration()","erector::output#space_left()","erector::cache#store_for()","erector::xmlwidget::tag()","erector::xmlwidget::tag()","erector::xmlwidget::tag_named()","erector::xmlwidget::tag_named()","erector::erected#text()","erector::text#text()","erector::text#text!()","erector::abstractwidget#to_a()","erector::output#to_a()","erector::erect#to_erector()","erector::erect#to_html()","erector::htmlwidget#to_html()","erector::htmlwidget#to_html()","erector::widget#to_html()","erector::convenience#to_pretty()","erector::abstractwidget#to_s()","erector::htmlwidget#to_s()","erector::htmlwidget#to_s()","erector::output#to_s()","erector::rawstring#to_s()","erector::widget#to_s()","erector::convenience#to_text()","erector::output#undent()","erector::dependencies#uniq()","erector::convenience#url()","erector::rails::helpers#url_for()","erector::abstractwidget#widget()","erector::rails::formbuilder::wrapping()",""],"info":[["ActionView","","ActionView.html","",""],["ActionView::Base","","ActionView/Base.html","",""],["ActionView::TemplateHandlers","","ActionView/TemplateHandlers.html","",""],["ActionView::TemplateHandlers::ErtTemplate","","ActionView/TemplateHandlers/ErtTemplate.html","",""],["Cell","","Cell.html","",""],["Cell::View","","Cell/View.html","",""],["Erector","","Erector.html","","<p>todo: unit test\n<p>Erector view framework\n"],["Erector::AbstractWidget","","Erector/AbstractWidget.html","","<p>Abstract base class for Widget. This pattern allows Widget to include lots\nof nicely organized modules …\n"],["Erector::AfterInitialize","","Erector/AfterInitialize.html","",""],["Erector::AfterInitialize::ClassMethods","","Erector/AfterInitialize/ClassMethods.html","",""],["Erector::Attributes","","Erector/Attributes.html","",""],["Erector::Cache","","Erector/Cache.html","",""],["Erector::Caching","","Erector/Caching.html","",""],["Erector::Caching::ClassMethods","","Erector/Caching/ClassMethods.html","",""],["Erector::Convenience","","Erector/Convenience.html","",""],["Erector::Dependencies","","Erector/Dependencies.html","",""],["Erector::Dependency","","Erector/Dependency.html","",""],["Erector::Element","","Erector/Element.html","",""],["Erector::Erect","","Erector/Erect.html","","<p>“erect” is the erstwhile name of the command-line tool that converts\nbetween HTML/ERB and  …\n"],["Erector::Erected","","Erector/Erected.html","",""],["Erector::Externals","","Erector/Externals.html","","<p>Externals are a mechanism by which a widget can declare page-level\nresources upon which it depends.  …\n"],["Erector::Externals::ClassMethods","","Erector/Externals/ClassMethods.html","",""],["Erector::HTML","","Erector/HTML.html","",""],["Erector::HTMLWidget","","Erector/HTMLWidget.html","","<p>A Widget is the center of the Erector universe.\n<p>To create a widget, extend Erector::Widget and implement …\n"],["Erector::HtmlWidget","","Erector/HTMLWidget.html","","<p>A Widget is the center of the Erector universe.\n<p>To create a widget, extend Erector::Widget and implement …\n"],["Erector::Inline","","Erector/Inline.html","",""],["Erector::InlineWidget","","Erector/InlineWidget.html","",""],["Erector::JQuery","","Erector/JQuery.html","",""],["Erector::Mixin","","Erector/Mixin.html","",""],["Erector::Needs","","Erector/Needs.html","",""],["Erector::Needs::ClassMethods","","Erector/Needs/ClassMethods.html","",""],["Erector::Output","","Erector/Output.html","",""],["Erector::Promise","","Erector/Promise.html","",""],["Erector::Rails","","Erector/Rails.html","",""],["Erector::Rails::FormBuilder","","Erector/Rails/FormBuilder.html","",""],["Erector::Rails::Helpers","","Erector/Rails/Helpers.html","",""],["Erector::Rails::TemplateHandler","","Erector/Rails/TemplateHandler.html","",""],["Erector::Rails::WidgetExtensions","","Erector/Rails/WidgetExtensions.html","",""],["Erector::Rails::WidgetExtensions::ClassMethods","","Erector/Rails/WidgetExtensions/ClassMethods.html","",""],["Erector::RailsFormBuilder","","Erector/RailsFormBuilder.html","",""],["Erector::Railtie","","Erector/Railtie.html","",""],["Erector::RawString","","Erector/RawString.html","","<p>A string that has a special type so Erector knows to render it directly,\nnot HTML-escaped\n"],["Erector::RbHandler","","Erector/RbHandler.html","",""],["Erector::Sass","","Erector/Sass.html","","<p>Adds sass support to Erector widgets.\n<p>Sass is an *optional dependency* of the Erector gem, so a call to …\n"],["Erector::Tag","","Erector/Tag.html","","<p>Defines a type of tag (not an actual element with attributes and contents)\n"],["Erector::Text","","Erector/Text.html","",""],["Erector::UnicodeBuilder","","Erector/UnicodeBuilder.html","","<p>Note that this class is only used in building erector itself (and even\nthen, only needs to be run when …\n"],["Erector::Widget","","Erector/Widget.html","","<p>A Widget is the center of the Erector universe.\n<p>To create a widget, extend Erector::Widget and implement …\n"],["Erector::Widgets","","Erector/Widgets.html","",""],["Erector::Widgets::EnvironmentBadge","","Erector/Widgets/EnvironmentBadge.html","","<p>Displays a colored badge in the upper-left corner  signifying the\nenvironment the app is running in. …\n"],["Erector::Widgets::Page","","Erector/Widgets/Page.html","","<p>Erector Page base class.\n<p>Allows for accumulation of script and style tags (see example below) with\neither …\n"],["Erector::Widgets::Table","","Erector/Widgets/Table.html","","<p>The Table widget provides the ability to render a table from a list of\nobjects (one for each row).\n<p>Because …\n"],["Erector::XMLWidget","","Erector/XMLWidget.html","","<p>Abstract base class for XML Widgets and HTMLWidget. Declares “tags” which\ndefine methods that …\n"],["Erector::XmlWidget","","Erector/XMLWidget.html","","<p>Abstract base class for XML Widgets and HTMLWidget. Declares “tags” which\ndefine methods that …\n"],["ExternalRenderer","","ExternalRenderer.html","",""],["FieldTable","","FieldTable.html","","<p>A simple HTML table with three columns: label, contents, and (optionally)\nnote. Each row is called a …\n"],["FieldTable::Field","","FieldTable/Field.html","",""],["Form","","Form.html","","<p>todo: make more like github.com/justinfrench/formtastic\n"],["Object","","Object.html","",""],["<<","Erector::Dependencies","Erector/Dependencies.html#method-i-3C-3C","(*new_dependencies_args)",""],["<<","Erector::Output","Erector/Output.html#method-i-3C-3C","(s)",""],["==","Erector::Dependency","Erector/Dependency.html#method-i-3D-3D","(other)",""],["[]","Erector::Cache","Erector/Cache.html#method-i-5B-5D","(klass, params = {}, content_method = nil)",""],["[]=","Erector::Cache","Erector/Cache.html#method-i-5B-5D-3D","(*args)",""],["__in_erb_template","Erector::Rails::WidgetExtensions","Erector/Rails/WidgetExtensions.html#method-i-__in_erb_template","()","<p>This is here to force #parent.capture to return the output\n"],["_attributes","Erector::Promise","Erector/Promise.html#method-i-_attributes","()",""],["_close_tag","Erector::Promise","Erector/Promise.html#method-i-_close_tag","()",""],["_element","Erector::Element","Erector/Element.html#method-i-_element","(tag_name, *args, &block)","<p>moved to Promise # Emits an open tag, comprising &#39;&lt;&#39;, tag name,\noptional attributes, and &#39;&gt;&#39; …\n"],["_emit","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-_emit","(options = {}, &block)","<p>executes this widget&#39;s #content method, which emits stuff onto the\noutput stream\n"],["_emit","Erector::Caching","Erector/Caching.html#method-i-_emit","(options = {})",""],["_emit_via","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-_emit_via","(parent, options = {}, &block)","<p>same as _emit, but using a parent widget&#39;s output stream and helpers\n"],["_emit_via","Erector::Caching","Erector/Caching.html#method-i-_emit_via","(parent, options = {})",""],["_empty_element","Erector::Element","Erector/Element.html#method-i-_empty_element","(tag_name, attributes={})",""],["_mark","Erector::Promise","Erector/Promise.html#method-i-_mark","()",""],["_open_tag","Erector::Promise","Erector/Promise.html#method-i-_open_tag","()",""],["_render","Erector::Promise","Erector/Promise.html#method-i-_render","()",""],["_render_close_tag","Erector::Promise","Erector/Promise.html#method-i-_render_close_tag","()",""],["_render_inside_tag","Erector::Promise","Erector/Promise.html#method-i-_render_inside_tag","()",""],["_render_open_tag","Erector::Promise","Erector/Promise.html#method-i-_render_open_tag","()",""],["_rewind","Erector::Promise","Erector/Promise.html#method-i-_rewind","()",""],["_set_attributes","Erector::Promise","Erector/Promise.html#method-i-_set_attributes","(attributes)",""],["_tag_name","Erector::Promise","Erector/Promise.html#method-i-_tag_name","()","<p>are these accessors necessary?\n"],["after_initialize","Erector::AfterInitialize::ClassMethods","Erector/AfterInitialize/ClassMethods.html#method-i-after_initialize","(instance=nil, &blk)",""],["after_initialize_parts","Erector::AfterInitialize::ClassMethods","Erector/AfterInitialize/ClassMethods.html#method-i-after_initialize_parts","()",""],["append","Erector::Output","Erector/Output.html#method-i-append","(s)",""],["append_indentation","Erector::Output","Erector/Output.html#method-i-append_indentation","()",""],["append_newline","Erector::Output","Erector/Output.html#method-i-append_newline","()","\n<pre>always append a newline, regardless of prettyprint setting</pre>\n<p>todo: test\n"],["assigns_for","Erector::Rails","Erector/Rails.html#method-c-assigns_for","(widget_class, view, local_assigns, is_partial)",""],["at_line_start?","Erector::Output","Erector/Output.html#method-i-at_line_start-3F","()",""],["basename","Erector::Erected","Erector/Erected.html#method-i-basename","()",""],["body_attributes","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-body_attributes","()","<p>override me to add attributes (e.g. a css class) to the body\n"],["body_content","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-body_content","()","<p>override me (or instantiate Page with a block)\n"],["buffer","Erector::Output","Erector/Output.html#method-i-buffer","()",""],["button","FieldTable","FieldTable.html#method-i-button","(&button_proc)","<p>If you call “button” you can pass in a block that&#39;ll get rendered\ninside the 2nd column …\n"],["cachable","Erector::Caching::ClassMethods","Erector/Caching/ClassMethods.html#method-i-cachable","(value = true)",""],["cachable?","Erector::Caching::ClassMethods","Erector/Caching/ClassMethods.html#method-i-cachable-3F","()",""],["cache","Erector::Caching","Erector/Caching.html#method-i-cache","()",""],["cache","Erector::Caching::ClassMethods","Erector/Caching/ClassMethods.html#method-i-cache","()",""],["cache=","Erector::Caching::ClassMethods","Erector/Caching/ClassMethods.html#method-i-cache-3D","(c)",""],["cacheable","Erector::Caching::ClassMethods","Erector/Caching/ClassMethods.html#method-i-cacheable","(value = true)",""],["call","Erector::Rails::TemplateHandler","Erector/Rails/TemplateHandler.html#method-i-call","(template)",""],["call_block","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-call_block","()","<p>When this method is executed, the default block that was passed in to the\nwidget&#39;s constructor will …\n"],["call_block","Erector::Inline","Erector/Inline.html#method-i-call_block","()","<p>Executes the widget&#39;s block (the one that was passed in the\nconstructor). Since “self” …\n"],["camelize","Erector::Erect","Erector/Erect.html#method-i-camelize","(lower_case_and_underscored_word, first_letter_in_uppercase = true)","<p>stolen from activesuppport/lib/inflector.rb\n"],["capture","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-capture","()",""],["capture","Erector::Rails","Erector/Rails.html#method-i-capture","(&block)","<p>We need to delegate #capture to helpers.capture, so that when the captured\nblock is executed, both erector …\n"],["capture","Erector::Rails::WidgetExtensions","Erector/Rails/WidgetExtensions.html#method-i-capture","(&block)","<p>We need to delegate #capture to parent.capture, so that when the captured\nblock is executed, both erector …\n"],["capture_content","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-capture_content","()","<p>Creates a whole new output string, executes the block, then converts the\noutput string to a string and …\n"],["character","Erector::Text","Erector/Text.html#method-i-character","(code_point_or_name)","<p>Return a character given its unicode code point or unicode name.\n"],["classize","Erector::Erected","Erector/Erected.html#method-i-classize","(filename)",""],["classname","Erector::Erected","Erector/Erected.html#method-i-classname","()",""],["classnames","Erector::Erected","Erector/Erected.html#method-i-classnames","()",""],["column","Erector::Widgets::Table","Erector/Widgets/Table.html#method-c-column","(id, name=id.to_s.titleize, &cell_proc)","<p>Define a column, optionally specifying the name (the heading that the user\nsees) and a block which renders …\n"],["comment","Erector::XMLWidget","Erector/XMLWidget.html#method-i-comment","(text = '')","<p>Emits an XML/HTML comment (&amp;lt;!– … –&amp;gt;) surrounding\n<code>text</code> and/or the output of <code>block</code>. see …\n"],["comment","Erector::XMLWidget","Erector/XMLWidget.html#method-i-comment","(text = '')","<p>Emits an XML/HTML comment (&amp;lt;!– … –&amp;gt;) surrounding\n<code>text</code> and/or the output of <code>block</code>. see …\n"],["compile","ActionView::TemplateHandlers::ErtTemplate","ActionView/TemplateHandlers/ErtTemplate.html#method-i-compile","(template)",""],["constantize","Erector::Erect","Erector/Erect.html#method-i-constantize","(camel_cased_word)",""],["content","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-content","()","<p>Template method which must be overridden by all widget subclasses. Inside\nthis method you call the magic …\n"],["content","Erector::Widgets::EnvironmentBadge","Erector/Widgets/EnvironmentBadge.html#method-i-content","()",""],["content","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-content","()",""],["content","Erector::Widgets::Table","Erector/Widgets/Table.html#method-i-content","()","<p>The standard erector content method.\n"],["content","ExternalRenderer","ExternalRenderer.html#method-i-content","()",""],["content","FieldTable","FieldTable.html#method-i-content","()",""],["content","FieldTable::Field","FieldTable/Field.html#method-i-content","()",""],["content","Form","Form.html#method-i-content","()",""],["content_for","Erector::Rails","Erector/Rails.html#method-i-content_for","(*args,&block)","<p>Rails content_for is output if and only if no block given\n"],["controller_assigns_propagate_to_partials","Erector::Rails::WidgetExtensions::ClassMethods","Erector/Rails/WidgetExtensions/ClassMethods.html#method-i-controller_assigns_propagate_to_partials","()",""],["controller_assigns_propagate_to_partials=","Erector::Rails::WidgetExtensions::ClassMethods","Erector/Rails/WidgetExtensions/ClassMethods.html#method-i-controller_assigns_propagate_to_partials-3D","(new_value)","<p>In ERb templates, controller instance variables are available to any\npartial that gets rendered by the …\n"],["convert","Erector::Erected","Erector/Erected.html#method-i-convert","()",""],["css","Erector::Convenience","Erector/Convenience.html#method-i-css","(href, options = {})","<p>Convenience method to emit a css file link, which looks like this: &lt;link\nhref=“erector.css” …\n"],["def_block_rails_helper","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-c-def_block_rails_helper","(method_name)","<p>Wrappers for rails helpers that produce markup, concatenating directly to\nthe output buffer if given …\n"],["def_rails_form_helper","Erector::Rails","Erector/Rails.html#method-c-def_rails_form_helper","(method_name)",""],["def_simple_rails_helper","Erector::Rails","Erector/Rails.html#method-c-def_simple_rails_helper","(method_name)","<p>Wrappers for rails helpers that produce markup. Erector needs to manually\nemit their result.\n"],["def_simple_rails_helper","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-c-def_simple_rails_helper","(method_name)","<p>Wrappers for rails helpers that produce markup. Erector needs to manually\nemit their result.\n"],["delete","Erector::Cache","Erector/Cache.html#method-i-delete","(klass, params = {})",""],["delete_all","Erector::Cache","Erector/Cache.html#method-i-delete_all","(klass)",""],["dependencies","Erector::Externals::ClassMethods","Erector/Externals/ClassMethods.html#method-i-dependencies","(type)","<p>returns all dependencies of the given type from this class and all its\nsuperclasses\n"],["depends_on","Erector::Externals::ClassMethods","Erector/Externals/ClassMethods.html#method-i-depends_on","(*args)","<p>Express a dependency of this widget Multiple forms:\n\n<pre>depends_on(type, text, options = {})</pre>\n<p>for example\n"],["dir","Erector::Erected","Erector/Erected.html#method-i-dir","()",""],["doctype","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-doctype","()","<p>Emit the Transitional doctype. TODO: allow selection from among different\nstandard doctypes\n"],["dom_id","Erector::Convenience","Erector/Convenience.html#method-i-dom_id","()","<p>makes a unique id based on the widget&#39;s class name and object id that\nyou can use as the HTML id …\n"],["element","Erector::Element","Erector/Element.html#method-i-element","(*args, &block)","<p>Internal method used to emit an HTML/XML element, including an open tag,\nattributes (optional, via the …\n"],["emit","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-emit","(options = {})","<p>Entry point for rendering a widget (and all its children). This method\ncreates a new output string (if …\n"],["empty_element","Erector::Element","Erector/Element.html#method-i-empty_element","(*args, &block)","<p>Internal method used to emit a self-closing HTML/XML element, including a\ntag name and optional attributes …\n"],["environment","Erector::Widgets::EnvironmentBadge","Erector/Widgets/EnvironmentBadge.html#method-i-environment","()",""],["eql?","Erector::Dependency","Erector/Dependency.html#method-i-eql-3F","(other)",""],["erector","Erector::Mixin","Erector/Mixin.html#method-i-erector","(options = {}, &block)","<p>Executes the block as if it were the content body of a fresh\nErector::Inline, and returns the #to_html …\n"],["explode","Erector::Erect","Erector/Erect.html#method-i-explode","(dir)",""],["explode_dirs","Erector::Erect","Erector/Erect.html#method-i-explode_dirs","()","<p>todo: unit test\n"],["external","Erector::Externals::ClassMethods","Erector/Externals/ClassMethods.html#method-i-external","(type, value, options = {})","<p>deprecated in favor of #depends_on todo: warning\n"],["extra_widgets","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-extra_widgets","()",""],["field","FieldTable","FieldTable.html#method-i-field","(label = nil, note = nil, &contents)","<p>Define a field, containing a label, optional note, and block for the\ncontents\n<p>TODO: allow passing in a …\n"],["fields_for","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-fields_for","(record_or_name_or_array, *args, &proc)",""],["filename","Erector::Erected","Erector/Erected.html#method-i-filename","()",""],["filter_local_assigns_for_partial","Erector::Rails","Erector/Rails.html#method-c-filter_local_assigns_for_partial","(widget_class, local_assigns)",""],["flash","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-flash","()",""],["form_for","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-form_for","(record_or_name_or_array, *args, &proc)",""],["form_method","Form","Form.html#method-i-form_method","()",""],["format_attributes","Erector::Attributes","Erector/Attributes.html#method-i-format_attributes","(attributes)",""],["format_sorted","Erector::Attributes","Erector/Attributes.html#method-i-format_sorted","(sorted)",""],["full_tags","Erector::XMLWidget","Erector/XMLWidget.html#method-c-full_tags","()","<p>Tags which can contain other stuff\n"],["full_tags","Erector::XMLWidget","Erector/XMLWidget.html#method-c-full_tags","()","<p>Tags which can contain other stuff\n"],["generate","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-generate","()",""],["get_needs","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-get_needs","()",""],["h","Erector::Text","Erector/Text.html#method-i-h","(content)","<p>Returns an HTML-escaped version of its parameter. Leaves the output string\nuntouched. This method is …\n"],["hash","Erector::Dependency","Erector/Dependency.html#method-i-hash","()",""],["head_content","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-head_content","()","<p>emit the contents of the head element. Override and call super if you want\nto put more stuff in there. …\n"],["html_attributes","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-html_attributes","()","<p>override me to change the attributes of the HTML element\n"],["html_safe?","Erector::RawString","Erector/RawString.html#method-i-html_safe-3F","()",""],["hyphenize_underscores","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-hyphenize_underscores","()",""],["hyphenize_underscores=","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-hyphenize_underscores-3D","(enabled)",""],["ignore_extra_assigns","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-ignore_extra_assigns","()",""],["ignore_extra_assigns=","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-ignore_extra_assigns-3D","(new_value)",""],["ignore_extra_controller_assigns","Erector::Rails::WidgetExtensions::ClassMethods","Erector/Rails/WidgetExtensions/ClassMethods.html#method-i-ignore_extra_controller_assigns","()",""],["ignore_extra_controller_assigns=","Erector::Rails::WidgetExtensions::ClassMethods","Erector/Rails/WidgetExtensions/ClassMethods.html#method-i-ignore_extra_controller_assigns-3D","(new_value)","<p>Often, large Rails applications will assign many controller instance\nvariables. Sometimes these aren&#39;t …\n"],["included","Erector::AfterInitialize","Erector/AfterInitialize.html#method-c-included","(base)",""],["included","Erector::Caching","Erector/Caching.html#method-c-included","(base)",""],["included","Erector::Externals","Erector/Externals.html#method-c-included","(base)",""],["included","Erector::Needs","Erector/Needs.html#method-c-included","(base)",""],["included","Erector::Rails::WidgetExtensions","Erector/Rails/WidgetExtensions.html#method-c-included","(base)",""],["included_head_content","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-included_head_content","()",""],["included_scripts","ExternalRenderer","ExternalRenderer.html#method-i-included_scripts","()",""],["included_stylesheets","ExternalRenderer","ExternalRenderer.html#method-i-included_stylesheets","()",""],["indent","Erector::Output","Erector/Output.html#method-i-indent","()",""],["init_rails","Erector","Erector.html#method-c-init_rails","(binding)",""],["inline","Erector","Erector.html#method-c-inline","(*args, &block)",""],["inline","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-inline","(*args, &block)",""],["inline?","Erector::Tag","Erector/Tag.html#method-i-inline-3F","()",""],["inline_scripts","ExternalRenderer","ExternalRenderer.html#method-i-inline_scripts","()",""],["inline_styles","ExternalRenderer","ExternalRenderer.html#method-i-inline_styles","()",""],["instance_variables_for_widget_assignment","ActionView::Base","ActionView/Base.html#method-i-instance_variables_for_widget_assignment","()",""],["instance_variables_for_widget_assignment","Cell::View","Cell/View.html#method-i-instance_variables_for_widget_assignment","()",""],["instance_variables_for_widget_assignment_for","ActionView::Base","ActionView/Base.html#method-i-instance_variables_for_widget_assignment_for","(target)",""],["instruct","Erector::XMLWidget","Erector/XMLWidget.html#method-i-instruct","(attributes={:version => \"1.0\", :encoding => \"UTF-8\"})","<p>Emits an XML instruction, which looks like this: &lt;?xml version=“1.0\"\nencoding=”UTF-8“ ?&gt;\n"],["instruct","Erector::XMLWidget","Erector/XMLWidget.html#method-i-instruct","(attributes={:version => \"1.0\", :encoding => \"UTF-8\"})","<p>Emits an XML instruction, which looks like this: &lt;?xml version=“1.0\"\nencoding=”UTF-8“ ?&gt;\n"],["interpolate","Erector::Dependency","Erector/Dependency.html#method-c-interpolate","(s)",""],["javascript","Erector::Convenience","Erector/Convenience.html#method-i-javascript","(value = nil, attributes = {})","<p>Emits a javascript block inside a <code>script</code> tag, wrapped in CDATA\ndoohickeys like all the cool JS kids do. …\n"],["join","Erector::Convenience","Erector/Convenience.html#method-i-join","(array, separator)","<p>Emits the result of joining the elements in array with the separator. The\narray elements and separator …\n"],["jquery","Erector::JQuery","Erector/JQuery.html#method-i-jquery","(*args)","<p>Emits a jQuery script, inside its own script tag, that is to be run on\ndocument ready or load.\n<p>Usage (from …\n"],["key","Erector::Cache","Erector/Cache.html#method-i-key","(params)","<p>convert hash-key to array-key for compatibility with 1.8.6\n"],["line_offset","ActionView::TemplateHandlers::ErtTemplate","ActionView/TemplateHandlers/ErtTemplate.html#method-c-line_offset","()",""],["link_to","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-link_to","(*args, &block)",""],["mark","Erector::Output","Erector/Output.html#method-i-mark","()",""],["method","Form","Form.html#method-i-method","()",""],["method_missing","Erector::Promise","Erector/Promise.html#method-i-method_missing","(method_name, *args, &block)",""],["method_missing","Erector::Rails","Erector/Rails.html#method-i-method_missing","(name, *args, &block)","<p>Delegate to non-markup producing helpers via method_missing, returning\ntheir result directly.\n"],["method_missing","Erector::Rails::FormBuilder","Erector/Rails/FormBuilder.html#method-i-method_missing","(method_name, *args, &block)",""],["method_missing","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-method_missing","(name, *args, &block)","<p>Delegate to non-markup producing helpers via method_missing, returning\ntheir result directly.\n"],["method_missing","Erector::RailsFormBuilder","Erector/RailsFormBuilder.html#method-i-method_missing","(method_name, *args, &block)",""],["my_dependencies","Erector::Externals::ClassMethods","Erector/Externals/ClassMethods.html#method-i-my_dependencies","()",""],["namify","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-namify","(name)",""],["nbsp","Erector::Text","Erector/Text.html#method-i-nbsp","(value = \" \")","<p>Returns a copy of value with spaces replaced by non-breaking space\ncharacters. With no arguments, return …\n"],["needed_defaults","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-needed_defaults","()",""],["needed_variables","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-needed_variables","()",""],["needs","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-needs","(*args)","<p>Class method by which widget classes can declare that they need certain\nparameters. If needed parameters …\n"],["needs?","Erector::Needs::ClassMethods","Erector/Needs/ClassMethods.html#method-i-needs-3F","(name)",""],["new","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-new","(assigns = {}, &block)",""],["new","Erector::AfterInitialize","Erector/AfterInitialize.html#method-c-new","(*args, &blk)",""],["new","Erector::Cache","Erector/Cache.html#method-c-new","()",""],["new","Erector::Dependency","Erector/Dependency.html#method-c-new","(type, text, options = {})",""],["new","Erector::Erect","Erector/Erect.html#method-c-new","(args)",""],["new","Erector::Erected","Erector/Erected.html#method-c-new","(in_file, superklass = 'Erector::Widget', method_name = 'content')",""],["new","Erector::Needs","Erector/Needs.html#method-c-new","(assigns = {})",""],["new","Erector::Output","Erector/Output.html#method-c-new","(options = {})",""],["new","Erector::Promise","Erector/Promise.html#method-c-new","(output, tag_name, attributes = {}, self_closing = false, newliney = true, &inside_renderer)",""],["new","Erector::Rails::FormBuilder","Erector/Rails/FormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","Erector::RailsFormBuilder","Erector/RailsFormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","Erector::Tag","Erector/Tag.html#method-c-new","(name, *params)","<p>Pass the self_closing and inline params as symbols, e.g.\n<p>Tag.new(“i”, :inline) Tag.new(“input”, …\n"],["new","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-c-new","(input, output)",""],["new","FieldTable","FieldTable.html#method-c-new","(*args)","<p>Pass in a block and it&#39;ll get called with a pointer to this table, so\nyou can call &#39;field&#39; …\n"],["newline","Erector::Output","Erector/Output.html#method-i-newline","()",""],["newliney?","Erector::Tag","Erector/Tag.html#method-i-newliney-3F","()",""],["newliney?","Erector::XMLWidget","Erector/XMLWidget.html#method-i-newliney-3F","(tag_name)",""],["newliney?","Erector::XMLWidget","Erector/XMLWidget.html#method-i-newliney-3F","(tag_name)",""],["output","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-output","(name, code_point)",""],["output_line","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-output_line","(line)",""],["page_title","Erector::Widgets::Page","Erector/Widgets/Page.html#method-i-page_title","()","<p>override me to provide a page title (default = name of the Page subclass)\n"],["parent_class","Erector::Erected","Erector/Erected.html#method-i-parent_class","()",""],["placeholder","Erector::Output","Erector/Output.html#method-i-placeholder","()","<p>Inserts a blank string into the output stream and returns a pointer to it.\nIf the caller holds on to …\n"],["prettyprint_default","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-prettyprint_default","()",""],["prettyprint_default","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-prettyprint_default","()",""],["prettyprint_default=","Erector::AbstractWidget","Erector/AbstractWidget.html#method-c-prettyprint_default-3D","(enabled)",""],["process_file","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-process_file","()",""],["process_line","Erector::UnicodeBuilder","Erector/UnicodeBuilder.html#method-i-process_line","(line)",""],["push","Erector::Dependencies","Erector/Dependencies.html#method-i-push","(*new_dependencies_args)",""],["raw","Erector::Text","Erector/Text.html#method-i-raw","(value)","<p>Returns text which will <strong>not</strong> be HTML-escaped.\n"],["rawtext","Erector::Text","Erector/Text.html#method-i-rawtext","(value)",""],["remove_unneeded_assigns","Erector::Rails","Erector/Rails.html#method-c-remove_unneeded_assigns","(widget_class, assigns)",""],["render","Erector::Rails","Erector/Rails.html#method-c-render","(widget, view, assigns = nil, options = {})",""],["render","Erector::Rails","Erector/Rails.html#method-i-render","(*args, &block)","<p>Wrap Rails&#39; render method, to capture output from partials etc.\n"],["render","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-render","(*args, &block)",""],["render","Erector::RbHandler","Erector/RbHandler.html#method-i-render","(template, local_assigns)",""],["render_externals","Erector::Externals","Erector/Externals.html#method-i-render_externals","(options_to_external_emiter = {})",""],["render_widget","Object","Object.html#method-i-render_widget","(widget_class, assigns=nil, options={})",""],["render_with_erector_widget","Object","Object.html#method-i-render_with_erector_widget","(*options, &block)",""],["render_with_externals","Erector::Externals","Erector/Externals.html#method-i-render_with_externals","(options_to_external_emiter = {})",""],["rendered_externals","ExternalRenderer","ExternalRenderer.html#method-i-rendered_externals","(type)",""],["respond_to?","Erector::Rails","Erector/Rails.html#method-i-respond_to-3F","(name)","<p>Since we delegate method_missing to helpers, we need to delegate\nrespond_to? as well.\n"],["respond_to?","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-respond_to-3F","(name)","<p>Since we delegate method_missing to parent, we need to delegate respond_to?\nas well.\n"],["rest_method","Form","Form.html#method-i-rest_method","()",""],["rewind","Erector::Output","Erector/Output.html#method-i-rewind","(pos = @mark)",""],["row_classes","Erector::Widgets::Table","Erector/Widgets/Table.html#method-c-row_classes","(*row_classes)","<p>A list of HTML classes to apply to the rows in turn.  After the list is\nexhausted, start again at the …\n"],["row_css_class","Erector::Widgets::Table","Erector/Widgets/Table.html#method-i-row_css_class","(object, index)","<p>You can override this method to provide a class for a row (as an\nalternative to calling row_classes). …\n"],["run","Erector::Erect","Erector/Erect.html#method-i-run","()",""],["sass","Erector::Sass","Erector/Sass.html#method-i-sass","(arg, options = {})",""],["say","Erector::Erect","Erector/Erect.html#method-i-say","(msg)",""],["scss","Erector::Sass","Erector/Sass.html#method-i-scss","(arg, options = {})",""],["self_closing?","Erector::Tag","Erector/Tag.html#method-i-self_closing-3F","()",""],["self_closing_tags","Erector::XMLWidget","Erector/XMLWidget.html#method-c-self_closing_tags","()","<p>Tags which are always self-closing\n"],["self_closing_tags","Erector::XMLWidget","Erector/XMLWidget.html#method-c-self_closing_tags","()","<p>Tags which are always self-closing\n"],["session","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-session","()",""],["should_assign?","Erector::Rails","Erector/Rails.html#method-c-should_assign-3F","(name, widget_class, is_partial)",""],["should_cache?","Erector::Caching","Erector/Caching.html#method-i-should_cache-3F","()",""],["snake_case","Erector::Tag","Erector/Tag.html#method-i-snake_case","(s)","<p>Convert to snake case.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;FooBar&quot;</span>.<span class=\"ruby-identifier\">snake_case</span>           <span class=\"ruby-comment\">#=&gt; &quot;foo_bar&quot;</span>\n<span class=\"ruby-string\">&quot;HeadlineCNNNews&quot;</span>.<span class=\"ruby-identifier\">snake_case</span>  <span class=\"ruby-comment\">#=&gt; &quot;headline_cnn_news&quot; ...</span>\n</pre>\n"],["sort_attributes","Erector::Attributes","Erector/Attributes.html#method-i-sort_attributes","(attributes)",""],["sort_for_xml_declaration","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-sort_for_xml_declaration","(attributes)",""],["sort_for_xml_declaration","Erector::XMLWidget","Erector/XMLWidget.html#method-i-sort_for_xml_declaration","(attributes)",""],["sort_for_xml_declaration","Erector::XMLWidget","Erector/XMLWidget.html#method-i-sort_for_xml_declaration","(attributes)",""],["space_left","Erector::Output","Erector/Output.html#method-i-space_left","()",""],["store_for","Erector::Cache","Erector/Cache.html#method-i-store_for","(klass)",""],["tag","Erector::XMLWidget","Erector/XMLWidget.html#method-c-tag","(*args)",""],["tag","Erector::XMLWidget","Erector/XMLWidget.html#method-c-tag","(*args)",""],["tag_named","Erector::XMLWidget","Erector/XMLWidget.html#method-c-tag_named","(tag_name, checked = [])",""],["tag_named","Erector::XMLWidget","Erector/XMLWidget.html#method-c-tag_named","(tag_name, checked = [])",""],["text","Erector::Erected","Erector/Erected.html#method-i-text","()",""],["text","Erector::Text","Erector/Text.html#method-i-text","(*values)","<p>Emits text to the output buffer, e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">text</span> <span class=\"ruby-string\">&quot;my dog smells awful&quot;</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;my dog smells awful&quot;</span>\n</pre>\n<p>If a string is …\n"],["text!","Erector::Text","Erector/Text.html#method-i-text-21","(value)","<p>Emits text which will <strong>not</strong> be HTML-escaped. Same effect as\ntext(raw(s))\n"],["to_a","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-to_a","(options = {})","<p>Entry point for rendering a widget (and all its children). Same as #render\n/ #to_html only it returns …\n"],["to_a","Erector::Output","Erector/Output.html#method-i-to_a","()",""],["to_erector","Erector::Erect","Erector/Erect.html#method-i-to_erector","()",""],["to_html","Erector::Erect","Erector/Erect.html#method-i-to_html","()",""],["to_html","Erector::HTMLWidget","Erector/HTMLWidget.html#method-i-to_html","(options = {})","<p>alias for AbstractWidget#render\n"],["to_html","Erector::HTMLWidget","Erector/HTMLWidget.html#method-i-to_html","(options = {})","<p>alias for AbstractWidget#render\n"],["to_html","Erector::Widget","Erector/Widget.html#method-i-to_html","(options = {})","<p>alias for AbstractWidget#render\n"],["to_pretty","Erector::Convenience","Erector/Convenience.html#method-i-to_pretty","(options = {})","<p>Render (like to_html) but adding newlines and indentation. You may just\nwant to call to_html(:prettyprint …\n"],["to_s","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-to_s","(*args)","<p>alias for #emit @deprecated Please use {#emit} instead\n"],["to_s","Erector::HTMLWidget","Erector/HTMLWidget.html#method-i-to_s","(*args)","<p>alias for #to_html @deprecated Please use {#to_html} instead\n"],["to_s","Erector::HTMLWidget","Erector/HTMLWidget.html#method-i-to_s","(*args)","<p>alias for #to_html @deprecated Please use {#to_html} instead\n"],["to_s","Erector::Output","Erector/Output.html#method-i-to_s","()",""],["to_s","Erector::RawString","Erector/RawString.html#method-i-to_s","()",""],["to_s","Erector::Widget","Erector/Widget.html#method-i-to_s","(*args)","<p>alias for #to_html @deprecated Please use {#to_html} instead\n"],["to_text","Erector::Convenience","Erector/Convenience.html#method-i-to_text","(options = {})","<p>Render (like to_html) but stripping all tags and inserting some appropriate\nformatting. Currently we …\n"],["undent","Erector::Output","Erector/Output.html#method-i-undent","()",""],["uniq","Erector::Dependencies","Erector/Dependencies.html#method-i-uniq","()",""],["url","Erector::Convenience","Erector/Convenience.html#method-i-url","(href, options = {})","<p>Convenience method to emit an anchor tag whose href and text are the same,\ne.g. &lt;a href=“example.com”>http://example.com</a …\n"],["url_for","Erector::Rails::Helpers","Erector/Rails/Helpers.html#method-i-url_for","(*args)",""],["widget","Erector::AbstractWidget","Erector/AbstractWidget.html#method-i-widget","(target, assigns = {}, options = {}, &block)","<p>Emits a (nested) widget onto the current widget&#39;s output stream.\nAccepts either a class or an instance. …\n"],["wrapping","Erector::Rails::FormBuilder","Erector/Rails/FormBuilder.html#method-c-wrapping","(parent_builder_class)",""],["README","","README_txt.html","","<p>Erector\n<p>erector.rubyforge.org\n<p>erector@googlegroups.com\n"]]}}